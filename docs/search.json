[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "An Introduction to R!",
    "section": "",
    "text": "Welcome to An Introduction to R Workshop! organised by University Malaya Medical Centre, Malaysia\n\n\n\n\n\nWhat is this workshop?\nThis workshop lays the groundwork for addressing key practical aspects of programming needed for the implementation of research methods. The course offers an introduction to programming in R and the tidyverse, and a primer on data wrangling and data visualisation.\n\n\nHave a look at the schedule below and download the necessary .qmd files for each session. While we have have included solutions- it would be way more beneficial to attempt these yourself first. Lets try to maximise learning in the next three hours.\nIf you are new to R, don’t worry - start off with this deck to learn how to install the software and familiarise yourself with the environment.\n\n\n\n\n\n\nDate\nTime\nTopic\n\n\n\n\n14.7.2022 (Monday)\n2.00 pm - 03.00 pm\nIntroduction to the Tidyverse for Data wrangling\n\n\n\n3.00 pm - 4.00 pm\nData Visualisation using ggplot2\n\n\n\n4.00 pm - 5.00 pm\nTaking a R!de\n\n\n\n5.00 pm\nBurning Questions and Wrap-up\n\n\n\n\n\n\n\nVivek Jason\nJason is a gazetting Public Health Physician passionate about epidemiology, infectious diseases and data science. He spends his time between coding, parenting a toddler and pondering the fate of the universe.\n\n\n\n\n\nAng Swee Hung\nSwee Hung is a training Public Health Physician from the Institute for Clinical research that works heavily in the fields of non-communicable disease epidemiology. Renowned for her calmness under pressure- Swee Hung also enjoys the serenity of long drives and the excitement of travelling. Her next destination is Shanghai.\nNg Yit Han\n\n\n\nThis course was developed and is maintained by Vivek Jason, Ang Swee Hung and Ng Yit Han.\nThe following individuals have contributed to improving the course or materials have been adapted from their courses: R for Applied Epidemiology and Public Health, Stephanie Hicks, Roger D. Peng, Naim Rashid.\nThe course materials are licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. Linked and embedded materials are governed by their own licenses. I assume that all external materials used or embedded here are covered under the educational fair use policy. If this is not the case and any material displayed here violates copyright, please let me know and I will remove it."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "installation.html#topics-covered",
    "href": "installation.html#topics-covered",
    "title": "Setup R in your System",
    "section": "Topics Covered",
    "text": "Topics Covered\n1. Installing R\n2. Installing RStudio\n3. Installing the tidyverse package\n4. Using R Tools for package installation and updates"
  },
  {
    "objectID": "installation.html#what-is-r",
    "href": "installation.html#what-is-r",
    "title": "Setup R in your System",
    "section": "What is R?",
    "text": "What is R?\nR is a programming language and software environment for statistical computing and graphics."
  },
  {
    "objectID": "installation.html#installing-r---step-1",
    "href": "installation.html#installing-r---step-1",
    "title": "Setup R in your System",
    "section": "Installing R - Step 1",
    "text": "Installing R - Step 1\n\nVisit the Comprehensive R Archive Network (CRAN) at https://cran.r-project.org/."
  },
  {
    "objectID": "installation.html#installing-r---step-2",
    "href": "installation.html#installing-r---step-2",
    "title": "Setup R in your System",
    "section": "Installing R - Step 2",
    "text": "Installing R - Step 2\n\nChoose your operating system (Windows, OS X, Linux).\nClick on “base” or the latest version.\nDownload and install it."
  },
  {
    "objectID": "installation.html#what-is-rstudio",
    "href": "installation.html#what-is-rstudio",
    "title": "Setup R in your System",
    "section": "What is RStudio?",
    "text": "What is RStudio?\nRStudio is an integrated development environment (IDE) for R. It makes it easier to write and manage your R code."
  },
  {
    "objectID": "installation.html#installing-rstudio---step-1",
    "href": "installation.html#installing-rstudio---step-1",
    "title": "Setup R in your System",
    "section": "Installing RStudio - Step 1",
    "text": "Installing RStudio - Step 1\nVisit https://www.rstudio.com/products/rstudio/download/ and click on the “Download” button under RStudio Desktop."
  },
  {
    "objectID": "installation.html#installing-rstudio---step-2",
    "href": "installation.html#installing-rstudio---step-2",
    "title": "Setup R in your System",
    "section": "Installing RStudio - Step 2",
    "text": "Installing RStudio - Step 2\n\nChoose your operating system.\nDownload and install it."
  },
  {
    "objectID": "installation.html#what-is-tidyverse",
    "href": "installation.html#what-is-tidyverse",
    "title": "Setup R in your System",
    "section": "What is Tidyverse?",
    "text": "What is Tidyverse?\nTidyverse is a collection of R packages designed for data science. All packages share an underlying design philosophy and grammar."
  },
  {
    "objectID": "installation.html#installing-the-tidyverse-package",
    "href": "installation.html#installing-the-tidyverse-package",
    "title": "Setup R in your System",
    "section": "Installing the Tidyverse Package",
    "text": "Installing the Tidyverse Package\nTo install the tidyverse package, run the following command in the RStudio console:\n\ninstall.packages(\"tidyverse\", repos = \"http://cran.us.r-project.org\")\n\npackage 'tidyverse' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\sueth\\AppData\\Local\\Temp\\Rtmpq4mLGP\\downloaded_packages"
  },
  {
    "objectID": "installation.html#loading-the-tidyverse-package",
    "href": "installation.html#loading-the-tidyverse-package",
    "title": "Setup R in your System",
    "section": "Loading the Tidyverse Package",
    "text": "Loading the Tidyverse Package\nAfter installation, you can load the tidyverse package with:\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "installation.html#introduction-to-r-tools",
    "href": "installation.html#introduction-to-r-tools",
    "title": "Setup R in your System",
    "section": "Introduction to R Tools",
    "text": "Introduction to R Tools\nR Tools is a collection of tools that integrates nicely with R and RStudio. It’s essential for developing packages and includes tools like gcc and make.\nPlease note that as of 2021, RTools has been superseded by RTools40 for R versions 4.0.0 and onwards. The install process is similar but you should consult the most up-to-date resources."
  },
  {
    "objectID": "installation.html#why-rtools",
    "href": "installation.html#why-rtools",
    "title": "Setup R in your System",
    "section": "Why RTools?",
    "text": "Why RTools?\n- Needed if you plan to create your own R packages\n- Useful if you want to install a development version of a package hosted on GitHub"
  },
  {
    "objectID": "installation.html#installing-rtools---step-1",
    "href": "installation.html#installing-rtools---step-1",
    "title": "Setup R in your System",
    "section": "Installing RTools - Step 1",
    "text": "Installing RTools - Step 1\nVisit CRAN’s RTools download page at https://cran.r-project.org/bin/windows/Rtools/."
  },
  {
    "objectID": "installation.html#installing-rtools---step-2",
    "href": "installation.html#installing-rtools---step-2",
    "title": "Setup R in your System",
    "section": "Installing RTools - Step 2",
    "text": "Installing RTools - Step 2\n\nDownload the appropriate RTools installer for your version of R. Check your R version by running `R.version.string` in your R console.\nRun the installer and follow the instructions. Make sure to check the box that says “Edit the system PATH”.\nRestart RStudio so the changes take effect."
  },
  {
    "objectID": "installation.html#verifying-rtools-installation",
    "href": "installation.html#verifying-rtools-installation",
    "title": "Setup R in your System",
    "section": "Verifying RTools Installation",
    "text": "Verifying RTools Installation\nIn RStudio, run the following command:\n\nSys.which(\"make\")\n\n                                      make \n\"C:\\\\RBuildTools\\\\4.2\\\\usr\\\\bin\\\\make.exe\" \n\n\nIf RTools was installed correctly, it should show the path to the `make` executable."
  },
  {
    "objectID": "installation.html#using-rtools",
    "href": "installation.html#using-rtools",
    "title": "Setup R in your System",
    "section": "Using RTools",
    "text": "Using RTools\nNow, you can use the `install.packages()` function to install packages from source or the `devtools::install_github()` function to install packages from GitHub.\n\n# install.packages(\"package_name\", type = \"source\")\n\n# devtools::install_github(\"username/package_name\")"
  },
  {
    "objectID": "session1_wranggling.html",
    "href": "session1_wranggling.html",
    "title": "Introduction to the Tidyverse for Data wrangling",
    "section": "",
    "text": "Data cleaning is arguably the most crucial step in the data analysis pipeline because it directly impacts the accuracy and reliability of insights drawn from the data."
  },
  {
    "objectID": "session1_wranggling.html#garbage-in-garbage-out-as-the-saying-goes.",
    "href": "session1_wranggling.html#garbage-in-garbage-out-as-the-saying-goes.",
    "title": "Introduction to the Tidyverse for Data wrangling",
    "section": "Garbage in, garbage out, as the saying goes.",
    "text": "Garbage in, garbage out, as the saying goes.\nWithout thoroughly cleaning the data, we might be working with incorrect, inconsistent, or irrelevant information, leading to potentially faulty conclusions. Data cleaning ensures the data is correctly formatted, accurate, complete, and ready for analysis. It involves dealing with missing values, removing duplicates, correcting inconsistencies, and handling outliers. Only after a rigorous data cleaning process can we trust that our analysis or model will give us meaningful, actionable insights.\nThus, while it can be a time-consuming process, skipping or skimping on data cleaning can lead to wasting even more time and resources downstream, as we try to interpret misleading results or troubleshoot models that aren’t performing as expected.\n\n\n\n\n\n\nRStudio environment\n\n\n\n\n\n\n\nSetting a working directory\nCheck you working directory by\n\ngetwd()\n\nYou can then set your working directory like this\n\nsetwd(\"C:\\Users\\VivekJason\\RTraining\\introduction\")\n\n\n\n\n\n\n\nSetting a work directory like this is called an absolute path and in statistical computing is a frowned upon practice as it locks directories to you system only. Instead we should utilise relative paths.\n\n\n\n\n\n\nA relative path should look like this\n\nsetwd(\"../data\")\n\nThere are even better practices for sustainability and reproducibility such but we wont cover those practices here. You can find more information in this post\n\n\nReading data into R\nThis section demonstrates the fundamental functions required to read and write data in R.\nIn base R, there are key functions for reading data:\n\nread.table() & read.csv(): used for reading tabular data\nreadLines(): used for reading lines from a text file\n\nCorresponding functions exist for writing data:\n\nwrite.table(): used to write tabular data to text files or connections, such as CSV\nwriteLines(): used to write character data line-by-line to a file or connection\n\nLet’s attempt to read data into R using the read.csv() function.\n\ndf <- read.csv(\"data/yourfilename.csv\")#this is just an example\n\nYou can even pull a csv straight from the web\n\ndf <- read.csv(\"https://raw.githubusercontent.com/MoH-Malaysia/data-darah-public/main/newdonors_state.csv\")\n\nYou can export he above csv to you computer by\n\nwrite.csv(df, \"blood_donor_malaysia.csv\")\n\n\n\nPackages and loading them\nIn the olden days you would install the package and call them into you environment like so:\n\ninstall.packages(\"tidyverse\")\nlibrary(tidyverse)\n\nBut these days we have packages that deal with even that\n\npacman::p_load(\n     tidyverse\n)"
  },
  {
    "objectID": "session1_wranggling.html#data-frames",
    "href": "session1_wranggling.html#data-frames",
    "title": "Introduction to the Tidyverse for Data wrangling",
    "section": "Data Frames",
    "text": "Data Frames\nThe data frame (or data.frame) is a key data structure in statistics and in R.\nThe basic structure of a data frame is that there is one observation per row and each column represents a variable, a measure, feature, or characteristic of that observation.\n\nCalling in some data\nFor the purposes of this session lets utilise the Malaysian COVID-19 deaths linelists maintained by the Ministry of Health on their Github page. Codes for each column are as follows:\n\ndate: yyyy-mm-dd format; date of death\ndate_announced: date on which the death was announced to the public (i.e. registered in the public linelist)\ndate_positive: date of positive sample\ndate_doseN: date of the individual’s first/second/third dose (if any)\nbrandN: p = Pfizer, s = Sinovac, a = AstraZeneca, c = Cansino, m = Moderna, h = Sinopharm, j = Janssen, u = unverified (pending sync with VMS)\nstate: state of residence\nage: age as an integer; note that it is possible for age to be 0, denoting infants less than 6 months old\nmale: binary variable with 1 denoting male and 0 denoting female\nbid: binary variable with 1 denoting brought-in-dead and 0 denoting an inpatient death\nmalaysian: binary variable with 1 denoting Malaysian and 0 denoting non-Malaysian\ncomorb: binary variable with 1 denoting that the individual has comorbidities and 0 denoting no comorbidities declared\n\nLets call in the data:\n\nc19_df <- read.csv(\"https://raw.githubusercontent.com/MoH-Malaysia/covid19-public/main/epidemic/linelist/linelist_deaths.csv\")\n\nCheck the data structure\n\nstr(c19_df)\n\n'data.frame':   37165 obs. of  15 variables:\n $ date          : chr  \"2020-03-17\" \"2020-03-17\" \"2020-03-20\" \"2020-03-21\" ...\n $ date_announced: chr  \"2020-03-17\" \"2020-03-17\" \"2020-03-20\" \"2020-03-21\" ...\n $ date_positive : chr  \"2020-03-12\" \"2020-03-15\" \"2020-03-11\" \"2020-03-13\" ...\n $ date_dose1    : chr  \"\" \"\" \"\" \"\" ...\n $ date_dose2    : chr  \"\" \"\" \"\" \"\" ...\n $ date_dose3    : chr  \"\" \"\" \"\" \"\" ...\n $ brand1        : chr  \"\" \"\" \"\" \"\" ...\n $ brand2        : chr  \"\" \"\" \"\" \"\" ...\n $ brand3        : chr  \"\" \"\" \"\" \"\" ...\n $ state         : chr  \"Johor\" \"Sarawak\" \"Sabah\" \"Melaka\" ...\n $ age           : int  34 60 58 50 80 39 57 69 48 73 ...\n $ male          : int  1 1 1 1 0 0 1 1 1 1 ...\n $ bid           : int  0 0 0 0 1 0 0 0 0 0 ...\n $ malaysian     : int  1 1 1 1 1 1 1 1 1 1 ...\n $ comorb        : int  1 1 1 1 1 1 1 1 1 1 ...\n\ndim(c19_df)\n\n[1] 37165    15"
  },
  {
    "objectID": "session1_wranggling.html#pivoting-in-r",
    "href": "session1_wranggling.html#pivoting-in-r",
    "title": "Introduction to the Tidyverse for Data wrangling",
    "section": "Pivoting in R",
    "text": "Pivoting in R\nThe tidyr package includes functions to transfer a data frame between long and wide.\n\nWide format data tends to have different attributes or variables describing an observation placed in separate columns.\nLong format data tends to have different attributes encoded as levels of a single variable, followed by another column that contains values of the observation at those different levels.\n\nLets create a sample set based on the deaths dataset focussing only on brand2 uptake over time.\n\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `across(where(is.character), na_if, \"\")`.\nCaused by warning:\n! The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\nSupply arguments directly to `.fns` through an anonymous function instead.\n\n  # Previously\n  across(a:b, mean, na.rm = TRUE)\n\n  # Now\n  across(a:b, \\(x) mean(x, na.rm = TRUE))\n\n\n`summarise()` has grouped output by 'date'. You can override using the\n`.groups` argument.\n\n\n\npivot_wider()\nThe pivot_wider() function is less commonly needed to tidy data as compared to its sister pivot_longer. It can, however, be useful for creating summary tables. As out sample dataset is already in long form- for the sake of this example we will pivot_wider first.\n\ndose2_df <- dose2_df %>%\n  pivot_wider(id_cols=\"date\",\n              names_from = \"brand2\",\n              values_from = \"count\")\n\n\n\n\n\n\n\nTippy-tip\n\n\n\nYou use the kable() function in dplyr to make nicer looking html tables\n\ndose2_df %>%\n  mutate_all(~replace_na(., 0)) %>%\n  head(10) %>%\n  knitr::kable(format=\"html\", caption = \"Vaccinations among COVID-19 fatalities by Brand\") %>% kableExtra::kable_minimal()\n\n`mutate_all()` ignored the following grouping variables:\n• Column `date`\nℹ Use `mutate_at(df, vars(-group_cols()), myoperation)` to silence the message.\n\n\n\n\nVaccinations among COVID-19 fatalities by Brand\n \n  \n    date \n    unvaccinated \n    Pfizer \n    Sinovac \n    Pending VMS sync \n    AstraZeneca \n    Moderna \n    Sinopharm \n  \n \n\n  \n    2020-03-17 \n    2 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n  \n  \n    2020-03-20 \n    1 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n  \n  \n    2020-03-21 \n    4 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n  \n  \n    2020-03-22 \n    4 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n  \n  \n    2020-03-23 \n    5 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n  \n  \n    2020-03-24 \n    2 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n  \n  \n    2020-03-25 \n    3 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n  \n  \n    2020-03-26 \n    5 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n  \n  \n    2020-03-27 \n    2 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n  \n  \n    2020-03-28 \n    6 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n  \n\n\n\n\n\n\n\n\n\npivot_longer()\nEven if your data is in a tidy format, pivot_longer() is useful for pulling data together to take advantage of faceting, or plotting separate plots based on a grouping variable.\n\ndose2_df %>%\n  pivot_longer(-date, \n               names_to = \"brand2\",\n               values_to = \"count\")\n\n# A tibble: 7,091 × 3\n# Groups:   date [1,013]\n   date       brand2           count\n   <chr>      <chr>            <int>\n 1 2020-03-17 unvaccinated         2\n 2 2020-03-17 Pfizer              NA\n 3 2020-03-17 Sinovac             NA\n 4 2020-03-17 Pending VMS sync    NA\n 5 2020-03-17 AstraZeneca         NA\n 6 2020-03-17 Moderna             NA\n 7 2020-03-17 Sinopharm           NA\n 8 2020-03-20 unvaccinated         1\n 9 2020-03-20 Pfizer              NA\n10 2020-03-20 Sinovac             NA\n# ℹ 7,081 more rows\n\n\n\n\nseparate() and unite()\nThe same tidyr package also contains two useful functions:\n\nunite(): combine contents of two or more columns into a single column\nseparate(): separate contents of a column into two or more columns\n\nFirst, we combine the first three columns into one new column using unite().\n\nc19_df %>% select(brand1, brand2, brand3) %>%\n  unite(col=\"profile\", \n        brand1:brand3, \n        sep=\"_\") %>%\n  tail(10)\n\n                      profile\n37156                      __\n37157    Pfizer_Pfizer_Pfizer\n37158 Sinovac_Sinovac_Sinovac\n37159           AstraZeneca__\n37160  Sinovac_Sinovac_Pfizer\n37161          Pfizer_Pfizer_\n37162    Pfizer_Pfizer_Pfizer\n37163    Pfizer_Pfizer_Pfizer\n37164    Pfizer_Pfizer_Pfizer\n37165                      __\n\n\nNext, we show how to separate the columns into three separate columns using separate() using the col, into and sep arguments.\n\nc19_df %>% select(brand1, brand2, brand3) %>%\n  unite(col=\"profile\", \n        brand1:brand3, \n        sep=\"_\") %>% \n  select(profile) %>%\n  separate(col=\"profile\", \n           into=c(\"brand1\", \"brand2\", \"brand3\"), \n           sep=\"_\") %>% \n  tail(10)\n\n           brand1  brand2  brand3\n37156                            \n37157      Pfizer  Pfizer  Pfizer\n37158     Sinovac Sinovac Sinovac\n37159 AstraZeneca                \n37160     Sinovac Sinovac  Pfizer\n37161      Pfizer  Pfizer        \n37162      Pfizer  Pfizer  Pfizer\n37163      Pfizer  Pfizer  Pfizer\n37164      Pfizer  Pfizer  Pfizer\n37165"
  },
  {
    "objectID": "session1_wranggling.html#mutating-joins",
    "href": "session1_wranggling.html#mutating-joins",
    "title": "Introduction to the Tidyverse for Data wrangling",
    "section": "Mutating joins",
    "text": "Mutating joins\nThe dplyr package provides a set of functions for joining two data frames into a single data frame based on a set of key columns.\nThere are several functions in the *_join() family.\n\nThese functions all merge together two data frames\nThey differ in how they handle observations that exist in one but not both data frames.\n\nHere, are the four functions from this family that you will likely use the most often:\n\n\n\n\n \n  \n    Function \n    What it includes in merged data frame \n  \n \n\n  \n    `left_join()` \n    Includes all observations in the left data frame, whether or not there is a match in the right data frame \n  \n  \n    `right_join()` \n    Includes all observations in the right data frame, whether or not there is a match in the left data frame \n  \n  \n    `inner_join()` \n    Includes only observations that are in both data frames \n  \n  \n    `full_join()` \n    Includes all observations from both data frames \n  \n\n\n\n\n\n\n[Source from R for Data Science]\nSuppose we want to create a table that combines the information about COVID-19 deaths (c19_df) with the information about the expenditure (hies_df) at each state.\nFirst lets take c19_df and aggregate it at the state level.\n\nstate_df <- c19_df %>% select(state) %>%\n  group_by(state) %>%\n  summarise(deaths=n())\n\nLets call in an external object to join\n\nhies_df <- read.csv(\"https://raw.githubusercontent.com/dosm-malaysia/data-open/main/datasets/economy/hies_2019.csv\")\n\nLets look at the data\n\ntable(hies_df$area_type)\n\n\n district       dun parliment     state \n      160       600       222        16 \n\n\n\nLeft Join\nWe can use the left_join() function to merge the state_df and hies_df datasets.\n\nleft_join(x = state_df, y = hies_df, by = join_by(state==area))\n\n# A tibble: 20 × 7\n   state        deaths area_type income_mean expenditure_mean  gini poverty_rate\n   <chr>         <int> <chr>           <int>            <int> <dbl>        <dbl>\n 1 Johor          4741 state            8013             4793 0.366          3.9\n 2 Kedah          2756 state            5522             3359 0.354          8.8\n 3 Kelantan       1428 state            4874             3223 0.378         12.4\n 4 Melaka         1215 state            7741             4955 0.383          3.9\n 5 Negeri Semb…   1546 state            6707             4350 0.391          4.3\n 6 Pahang         1037 state            5667             3652 0.33           4.3\n 7 Perak          2168 state            5645             3564 0.377          7.3\n 8 Perlis          199 state            5476             3468 0.334          3.9\n 9 Perlis          199 district         5476             3468 0.334          3.9\n10 Pulau Pinang   2085 state            7774             4630 0.359          1.9\n11 Sabah          3212 state            5745             2792 0.397         19.5\n12 Sarawak        1796 state            5959             3448 0.387          9  \n13 Selangor      11028 state           10827             5830 0.393          1.2\n14 Terengganu      905 state            6815             4336 0.335          6.1\n15 W.P. Kuala …   2861 state           13257             6913 0.35           0.2\n16 W.P. Kuala …   2861 district        13257             6913 0.35           0.2\n17 W.P. Labuan     159 state            8319             4097 0.333          3.1\n18 W.P. Labuan     159 district         8319             4097 0.333          3.1\n19 W.P. Putraj…     29 state           12840             7980 0.361          0.4\n20 W.P. Putraj…     29 district        12840             7980 0.361          0.4\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe by argument indicates the column (or columns) that the two tables have in common. One more than one joining variable an be used for this statement\n\n\nQuite obviously the join should give you the total number of rows on the left side of your statement. Note in the above case there are 20 rows because there are four districts with the same name as states.\n\n\nInner Join\nThe inner_join() function only retains the rows of both tables that have corresponding values. Here we can see the difference.\n\ninner_join(x = state_df, y = hies_df, by = join_by(state==area))\n\n# A tibble: 20 × 7\n   state        deaths area_type income_mean expenditure_mean  gini poverty_rate\n   <chr>         <int> <chr>           <int>            <int> <dbl>        <dbl>\n 1 Johor          4741 state            8013             4793 0.366          3.9\n 2 Kedah          2756 state            5522             3359 0.354          8.8\n 3 Kelantan       1428 state            4874             3223 0.378         12.4\n 4 Melaka         1215 state            7741             4955 0.383          3.9\n 5 Negeri Semb…   1546 state            6707             4350 0.391          4.3\n 6 Pahang         1037 state            5667             3652 0.33           4.3\n 7 Perak          2168 state            5645             3564 0.377          7.3\n 8 Perlis          199 state            5476             3468 0.334          3.9\n 9 Perlis          199 district         5476             3468 0.334          3.9\n10 Pulau Pinang   2085 state            7774             4630 0.359          1.9\n11 Sabah          3212 state            5745             2792 0.397         19.5\n12 Sarawak        1796 state            5959             3448 0.387          9  \n13 Selangor      11028 state           10827             5830 0.393          1.2\n14 Terengganu      905 state            6815             4336 0.335          6.1\n15 W.P. Kuala …   2861 state           13257             6913 0.35           0.2\n16 W.P. Kuala …   2861 district        13257             6913 0.35           0.2\n17 W.P. Labuan     159 state            8319             4097 0.333          3.1\n18 W.P. Labuan     159 district         8319             4097 0.333          3.1\n19 W.P. Putraj…     29 state           12840             7980 0.361          0.4\n20 W.P. Putraj…     29 district        12840             7980 0.361          0.4\n\n\nDoes inner_join give different results to left_join in the above example?\n\n\nRight Join\nThe right_join() function is like the left_join() function except that it gives priority to the “right” hand argument.\n\nright_join(x = state_df, y = hies_df, by = join_by(state==area))\n\n# A tibble: 998 × 7\n   state        deaths area_type income_mean expenditure_mean  gini poverty_rate\n   <chr>         <int> <chr>           <int>            <int> <dbl>        <dbl>\n 1 Johor          4741 state            8013             4793 0.366          3.9\n 2 Kedah          2756 state            5522             3359 0.354          8.8\n 3 Kelantan       1428 state            4874             3223 0.378         12.4\n 4 Melaka         1215 state            7741             4955 0.383          3.9\n 5 Negeri Semb…   1546 state            6707             4350 0.391          4.3\n 6 Pahang         1037 state            5667             3652 0.33           4.3\n 7 Perak          2168 state            5645             3564 0.377          7.3\n 8 Perlis          199 state            5476             3468 0.334          3.9\n 9 Perlis          199 district         5476             3468 0.334          3.9\n10 Pulau Pinang   2085 state            7774             4630 0.359          1.9\n# ℹ 988 more rows\n\n\nWhat about now?"
  },
  {
    "objectID": "session1_wranggling.html#acknowledgements",
    "href": "session1_wranggling.html#acknowledgements",
    "title": "Introduction to the Tidyverse for Data wrangling",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nMaterial for this lecture was borrowed and adopted from\n\nhttps://stephaniehicks.com/jhustatcomputing2022/\nThe Epidemiologist R Handbook\nhttps://rafalab.github.io/dsbook\nhttps://rmd4sci.njtierney.com"
  },
  {
    "objectID": "session1_wranggling.html#additional-resources",
    "href": "session1_wranggling.html#additional-resources",
    "title": "Introduction to the Tidyverse for Data wrangling",
    "section": "Additional Resources",
    "text": "Additional Resources\n\n\n\n\n\n\nTip\n\n\n\n\nhttps://r4ds.had.co.nz/tibbles.html\nhttps://jhudatascience.org/tidyversecourse/wrangle-data.html#data-wrangling\ndplyr cheat sheet from RStudio"
  }
]