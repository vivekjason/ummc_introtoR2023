{
  "hash": "df2b3b9b9ab457dc08843ca39e12d845",
  "result": {
    "markdown": "---\ntitle: \"Setup R in your System\"\nauthor: \"Vivek Jason\"\nformat: revealjs\neditor: visual\n---\n\n\n## Topics Covered\n\n1\\. Installing R\n\n2\\. Installing RStudio\n\n3\\. Installing the tidyverse package\n\n4\\. Using R Tools for package installation and updates\n\n## What is R?\n\nR is a programming language and software environment for statistical computing and graphics.\n\n## Installing R - Step 1\n\n1.  Visit the Comprehensive R Archive Network (CRAN) at <https://cran.r-project.org/>.\n\n![](images/CRANlogo.png){fig-align=\"center\"}\n\n## Installing R - Step 2\n\n2.  Choose your operating system (Windows, OS X, Linux).\n3.  Click on \"base\" or the latest version.\n4.  Download and install it.\n\n## What is RStudio?\n\nRStudio is an integrated development environment (IDE) for R. It makes it easier to write and manage your R code.\n\n## Installing RStudio - Step 1\n\nVisit <https://www.rstudio.com/products/rstudio/download/> and click on the \"Download\" button under RStudio Desktop.\n\n![](images/RStudio-Logo-Flat.png){fig-align=\"center\"}\n\n## Installing RStudio - Step 2\n\n1.  Choose your operating system.\n2.  Download and install it.\n\n## What is Tidyverse?\n\nTidyverse is a collection of R packages designed for data science. All packages share an underlying design philosophy and grammar.\n\n## Installing the Tidyverse Package\n\nTo install the tidyverse package, run the following command in the RStudio console:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\", repos = \"http://cran.us.r-project.org\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npackage 'tidyverse' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n\tC:\\Users\\sueth\\AppData\\Local\\Temp\\Rtmpq4mLGP\\downloaded_packages\n```\n:::\n:::\n\n\n## **Loading the Tidyverse Package**\n\nAfter installation, you can load the tidyverse package with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## **Introduction to R Tools**\n\nR Tools is a collection of tools that integrates nicely with R and RStudio. It's essential for developing packages and includes tools like gcc and make.\n\nPlease note that as of 2021, RTools has been superseded by RTools40 for R versions 4.0.0 and onwards. The install process is similar but you should consult the most up-to-date resources.\n\n## Why RTools?\n\n\\- Needed if you plan to create your own R packages\n\n\\- Useful if you want to install a development version of a package hosted on GitHub\n\n## Installing RTools - Step 1\n\nVisit CRAN's RTools download page at <https://cran.r-project.org/bin/windows/Rtools/>.\n\n![](images/100736708_101114164967102_7137626456380669952_n.png){fig-align=\"center\"}\n\n## Installing RTools - Step 2\n\n1.  Download the appropriate RTools installer for your version of R. Check your R version by running \\`R.version.string\\` in your R console.\n2.  Run the installer and follow the instructions. Make sure to check the box that says \"Edit the system PATH\".\n3.  Restart RStudio so the changes take effect.\n\n## Verifying RTools Installation\n\nIn RStudio, run the following command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.which(\"make\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                      make \n\"C:\\\\RBuildTools\\\\4.2\\\\usr\\\\bin\\\\make.exe\" \n```\n:::\n:::\n\n\nIf RTools was installed correctly, it should show the path to the \\`make\\` executable.\n\n## Using RTools\n\nNow, you can use the \\`install.packages()\\` function to install packages from source or the \\`devtools::install_github()\\` function to install packages from GitHub.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"package_name\", type = \"source\")\n\n# devtools::install_github(\"username/package_name\")\n```\n:::\n\n\n\\\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}